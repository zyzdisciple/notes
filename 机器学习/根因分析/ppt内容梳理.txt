1. 

根因定位的目标:

其主要目的是, 在一系列连续的, 相关或不相关的事件中, 找到其中任意(单条事件, 或事件集合) 发生的根本原因.

事件的主要来源目前有: sysLog, 配置变更, 性能指标.

2.

算法:

1. 决策树, 随机森林算法 

	需要有相应的规则, 即事件本身的特征, 可能性并非是无限的, 而是有明确的规律可循的.
	
	比如 明确的知道 当 路由器出现问题, 一定会导致端口异常. 又或者, 当路由器异常, 且设备异常, 一定会导致端口异常.
	
	即事件的发生是由明确的一个 或多个原因导致的.
	
	我觉得往往拓扑之间的 节点状态就属于此类.
	
	除上面提到的决策树, 随机森林算法之外.
	
	有:
	
2. 频繁项分析

	频繁项分析, 简要来说, 则是根据历史数据,  按照不同的时期, 将数据进行分组, 统计事件发生频次, 如果某个, 或某几个事件总是在同一时间出现, 则认为这几种事件之间存在关联关系. 同时根据事件发生的先后顺序, 决定其因果关系.
	
3. HotSpot

	解释起来略微复杂, 其核心思想是: 将 属性/要素 进行分类, 比如分成 服务器, 服务器端口, 路由器, 路由器端口, F5, F5端口. 当然属性可能存在特别多, 但并非无穷的.
	
	进而对其进行排列组合, 剪枝操作, 最终得到根因集合.
	
	在进行剪枝操作的过程, 需要 进行潜在影响力 评分, 而评分的标准则是, 则是需要知道, 当某个最细粒度元素(如端口状态)处于 某个值时, 其子元素的预期值应该是多少.
	
	而这种算法, 在我的理解中, 较为适合于 对于某一数据, 我们需要寻找其根因所在. 比如对于 流量的变更, 分析其可能的原因, 最终多种因素的影响叠加到 流量大小的结果中. 目的是分析 影响流量大小的因素.
	
	而非从一堆事件中, 找到导致事件发生的根本原因.
	
	由果索因.
	
	而对于我们的数据而言, 并不知道哪些是结果, 哪些是原因, 自然也很难套用这种方式.
	而对于另一种情形, 选定某一事件, 需要知道其根因, 则比较适用于这种方式.
	
4. 聚类算法

	聚类算法,其目的核心并非为了找到事件根因所在, 而是为了将 庞大的事件量最终缩小到 几条 几十条, 方便运维人员根据自身经验 去定位问题核心.
	
5. adtributor

	其核心思想在于 1. 对于每一维度，如果元素的波动变化在异常KPI的波动变化中的占比越大，则认为元素越能解释KPI异常的发生。 2. 如果KPI在某一维度下的真实值和预测值相差越大，则越有可能是异常根因
	
	比较依赖于异常值与预测值, 同时, 其是针对属性值进行修剪, 每个属性 即一个维度. 
	
	然而 对于状态类事件由于 非黑即白的特点, 并不关心其值究竟是多少.
	
数据分类:

对于不同的数据进行根因分析, 也是不同的.

目前主要分为这样两类, 一种是状态类事件 也即 事件发生则表示异常, 并不关心具体值会是多少. 其次是数值类事件, 比如cpu 50% 和 99%的利用率区别还是很大的. 但在数值类事件中 也要分为两类数据, 一种是 真实值, 一种是计算值. 即真实数据与百分比 计算 所得数据. 后两种数据的主要差别在于, 是否具有可加和性.

存疑:

1. 针对以上几种算法, 以及数据特点. 我们的数据特点是怎样的? 目前并不倾向于同时做两种数据的根因分析处理, 需要研究的算法及数据处理方向可能都会有所不同. 个人比较倾向于第一种 即状态类事件. 数据模型简单, 便于分析.
2. 而 事件的 根因分析, 也需要明确, 目的究竟是从一堆意义不明的事件中, 找到其根因, 还是针对某一事件寻找其根因.
2.1 但往往会存在 一堆意义不明的事件中, 其可能是相互之间没有任何关联的事件, 也就意味着会存在多个根因. 我们是否需要主动去发现这种关联性, 进而首先进行聚类, 将事件分为不同的大类别之后, 再度寻找每一类之下的根因?
但即使如此, 聚类之后 某一大类中 依然会存在多种根因. 又该如何处理?

	





至于深度学习相关算法, 往往都依赖确定的结果, 即已经知道什么是根因的情况下 对以后发生的事件 进行分析. 在这里暂不考虑.